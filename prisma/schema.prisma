// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                  String    @id @default(cuid())
  username            String    @unique
  email               String    @unique
  password            String?
  // TODO: Role based-ACL to use Role[] instead of Role
  // role                Role[]
  role                Role      @default(USER)
  isTfaEnabled        Boolean   @default(false)
  tfaSecret           String?
  resetPasswordToken  String?   @unique
  resetPasswordExpire DateTime?
  confirmEmailToken   String?   @unique
  isEmailConfirmed    Boolean   @default(false)

  profile      Profile?
  posts        Post[]
  subreddits   Subreddit[]
  comments     Comment[]
  postVotes    PostVote[]
  commentVotes CommentVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id  String  @id @default(cuid())
  bio String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subreddit {
  id          String  @id @default(cuid())
  name        String  @unique
  title       String
  description String?
  imageUrl    String?
  bannerUrl   String?

  posts       Post[]
  creator     User   @relation(fields: [creatorName], references: [username], onDelete: Cascade)
  creatorName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id       String  @id @default(cuid())
  title    String
  content  String?
  slug     String  @unique
  imageUrl String?

  author        User       @relation(fields: [authorName], references: [username], onDelete: Cascade)
  authorName    String
  subreddit     Subreddit  @relation(fields: [subredditName], references: [name], onDelete: Cascade)
  subredditName String
  comments      Comment[]
  votes         PostVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id             String  @id @default(cuid())
  content        String
  isEdited       Boolean @default(false)
  isDeleted      Boolean @default(false)
  numTimesGilded Int?    @default(0)

  author     User          @relation(fields: [authorName], references: [username], onDelete: Cascade)
  authorName String
  post       Post          @relation(fields: [postSlug], references: [slug], onDelete: Cascade)
  postSlug   String
  votes      CommentVote[]
  children   Comment[]     @relation("Comment_Children")
  parent     Comment?      @relation("Comment_Children", fields: [parentId], references: [id])
  parentId   String?       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model PostVote {
  id       String   @id @default(cuid())
  value    Int      @default(0)
  voteType VoteType

  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  username String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentVote {
  id       String   @id @default(cuid())
  value    Int      @default(0)
  voteType VoteType

  User      User    @relation(fields: [username], references: [username], onDelete: Cascade)
  username  String
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
